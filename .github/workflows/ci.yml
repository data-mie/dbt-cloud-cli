name: Continuous Integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          pip install -e .[test,lint]
          sudo apt-get update -yqq
          sudo apt-get install jq -yqq

      - name: Lint Python
        run: black --check .

      - name: Run unit tests
        run: pytest --cov=dbt_cloud --cov-report html:cov_html

      - name: Archive code coverage results
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: cov_html/
          retention-days: 90

  integration-tests:
    runs-on: ubuntu-latest
    env:
      DBT_CLOUD_API_TOKEN: ${{ secrets.DBT_CLOUD_API_TOKEN }}
      DBT_CLOUD_ACCOUNT_ID: ${{ secrets.DBT_CLOUD_ACCOUNT_ID }}
      DBT_CLOUD_PROJECT_ID: 26597
      DBT_CLOUD_ENVIRONMENT_ID: 49819
      DBT_CLOUD_JOB_ID: 43167

    steps:
      - uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          pip install -e .
          sudo apt-get update -yqq
          sudo apt-get install jq -yqq

      - name: Test 'dbt-cloud job get'
        run: dbt-cloud job get

      - name: Test 'dbt-cloud job list'
        run: |
          dbt-cloud job list | tee jobs.json
          job_count=$(cat jobs.json | jq '.data | length')
          [[ $job_count > 0 ]] && exit 0 || exit 1

      - name: Test 'dbt-cloud job export'
        run: dbt-cloud job export | tee job.json

      - name: Test 'dbt-cloud job import'
        run: cat job.json | dbt-cloud job import | tee job_imported.json

      - name: Test 'dbt-cloud job delete'
        run: dbt-cloud job delete --job-id $(cat job_imported.json | jq .data.id)

      - name: Test 'dbt-cloud job delete-all'
        run: dbt-cloud job delete-all --keep-jobs "[43167, 49663]" -y

      - name: Test 'dbt-cloub job create'
        id: job_create
        run: |
          set -o pipefail
          dbt-cloud job create --project-id $DBT_CLOUD_PROJECT_ID --environment-id $DBT_CLOUD_ENVIRONMENT_ID --name "Test nested args" --settings-threads 4 --execute-steps '["dbt seed"]' | tee job_created.json ; echo $?
          echo ::set-output name=job_id::$(cat job_created.json | jq .data.id -r)
          job_threads=$(cat job_created.json | jq .data.settings.threads)
          [[ $job_threads = 4 ]] && exit 0 || exit 1

      - name: Test 'dbt-cloud job run'
        id: job_run
        run: |
          dbt-cloud job run --job-id ${{ steps.job_create.outputs.job_id }} --wait -f run.json
          echo ::set-output name=run_id::$(cat run.json | jq .data.id -r)

      - name: Test 'dbt-cloud run get'
        run: dbt-cloud run get --run-id ${{ steps.job_run.outputs.run_id }}

      - name: Test 'dbt-cloud run list'
        run: dbt-cloud run list --paginate --status "Succeeded"

      - name: Test 'dbt-cloud run cancel'
        run: dbt-cloud run cancel --run-id  ${{ steps.job_run.outputs.run_id }}

      - name: Test 'dbt-cloud run list-artifacts'
        run: dbt-cloud run list-artifacts --run-id ${{ steps.job_run.outputs.run_id }}

      - name: Test 'dbt-cloud run get-artifact'
        run: dbt-cloud run get-artifact --run-id ${{ steps.job_run.outputs.run_id }} --path manifest.json

      - name: Test 'dbt-cloud project list'
        run: |
          dbt-cloud project list > projects.json
          cat projects.json | jq '.data[] | {id: .id, name: .name}'
          project_count=$(cat projects.json | jq '.data | length')
          [[ $project_count > 0 ]] && exit 0 || exit 1

      - name: Test 'dbt-cloud environment list'
        run: |
          dbt-cloud environment list > environments.json
          cat environments.json | jq '.data[] | {id: .id, name: .name}'
          environment_count=$(cat environments.json | jq '.data | length')
          [[ $environment_count > 0 ]] && exit 0 || exit 1

      - name: Test 'dbt-cloud metadata query'
        run: dbt-cloud metadata query -f tests/data/metadata_query.graphql

      - name: Cleanup
        run: dbt-cloud job delete --job-id ${{ steps.job_create.outputs.job_id }}
        if: always()

